# FireDragon Project Rules

ALWAYS UPDATE MEMORY BANK AS YOU WORK. 

ALWAYS CHECK MEMORY BANK STATUS BEFORE STARTING A NEW TASK.

## Project Patterns

### Project-Specific Rules

The global project module is `github.com/ZanzyTHEbar/firedragon-go`, and the project is called `firedragon-go`. The project is a multi-currency transaction processing system. The project is designed to be modular and extensible, with a focus on clean architecture and separation of concerns. The project is built using Go 1.23+ and follows the Go community's best practices for code organization, testing, and documentation.

### Code Organization
1. All new code should follow the hexagonal architecture pattern
2. Interfaces should be defined in the interfaces/ directory
3. Implementations should be in the adapters/ directory
4. Core business logic belongs in the services/ directory
5. Common utilities go in pkg/
6. Internal shared code goes in internal/

### Naming Conventions
1. Use descriptive, full words for names
2. Interface names should describe behavior (e.g., TransactionProcessor)
3. Implementation names should include context (e.g., EnableBankingClient)
4. Test files should end with _test.go
5. Mock files should end with _mock.go

### Error Handling
1. Always use wrapped errors with context
2. Log errors at the appropriate level
3. Include relevant transaction/operation IDs in errors
4. Use custom error types for specific scenarios
5. All Errors in the project MUST use the `github.com/ZanzyTHEbar/errbuilder-go` package.
6. Usage of this library can already be found in the `firefly/errors.go` file.

### Configuration
1. Use TOML format for configuration files
2. Support environment variable overrides
3. Place configs in ~/.config/firedragon/
4. Use viper for configuration management

### Development Workflow
1. Use make commands for common tasks
2. Run make dev for development
3. Use make test for testing
4. Clean with make clean

### Testing
1. Write unit tests for all new code
2. Include integration tests for adapters
3. Use table-driven tests where appropriate
4. Mock external dependencies

## Project Intelligence

### Critical Paths
1. Transaction processing pipeline
2. External API integrations
3. Database operations
4. Error handling and recovery

### Known Challenges
1. Rate limiting across multiple APIs
2. Transaction deduplication logic
3. Multi-currency handling
4. OAuth2 token management

### User Preferences
1. Configuration via TOML files
2. Command-line interface primary interaction
3. Minimal manual intervention needed
4. Clear error messages and logging

### Tool Usage
1. make for build and development tasks
2. air for live reload during development
3. NATS for message processing
4. SQLite for local storage

### Evolution Notes
1. Started with basic CLI structure
2. Added NATS integration for reliability
3. Implementing adapters progressively
4. Building monitoring system incrementally

## Project-Specific Rules

### Code Style
1. Use gofmt for formatting
2. Follow Go best practices
3. Document all exported items
4. Keep functions focused and small

### Architecture Rules
1. Maintain clean interface boundaries
2. Use dependency injection
3. Keep core domain pure
4. Abstract external dependencies

### Security Rules
1. Never commit credentials
2. Use environment variables for secrets
3. Validate all external input
4. Use TLS for all API connections

### Performance Rules
1. Implement rate limiting
2. Use connection pooling
3. Cache frequently accessed data
4. Batch operations where possible 

### Pocketbase Rules

We are using pocketbase 0.26.x. There is no `models` package in this version, everything has been refactored into `core` package, and various sub-packages. There is no `schemas` package either. 

Collections are Tables and Records are Rows in traditional parlance.

1. Use indexes for frequently queried fields
2. Use transactions for batch operations
3. Monitor performance with profiling tools
4. Optimize queries for speed
5. Use pagination for large result sets
6. Avoid N+1 query problems
7. Use prepared statements for repeated queries
8. Use caching for frequently accessed data
9. Use connection pooling for database connections
10. Use async processing for long-running tasks
11. Use background jobs for non-urgent tasks
12. Use a CDN for static assets
13. Use gzip compression for API responses
14. Use HTTP/2 for API connections